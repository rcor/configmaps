apiVersion: v1
data:
  README: |+

    This directory holds configuration files for the Apache HTTP Server;
    any files in this directory which have the ".conf" extension will be
    processed as httpd configuration files.  The directory is used in
    addition to the directory /etc/httpd/conf.modules.d/, which contains
    configuration files necessary to load modules.

    Files are processed in alphabetical order.
    Rodolfo cordero

  autoindex.conf: |+
    #
    # Directives controlling the display of server-generated directory listings.
    #
    # Required modules: mod_authz_core, mod_authz_host,
    #                   mod_autoindex, mod_alias
    #
    # To see the listing of a directory, the Options directive for the
    # directory must include "Indexes", and the directory must not contain
    # a file matching those listed in the DirectoryIndex directive.
    #

    #
    # IndexOptions: Controls the appearance of server-generated directory
    # listings.
    #
    IndexOptions FancyIndexing HTMLTable VersionSort

    # We include the /icons/ alias for FancyIndexed directory listings.  If
    # you do not use FancyIndexing, you may comment this out.
    #
    Alias /icons/ "/opt/rh/httpd24/root/usr/share/httpd/icons/"

    <Directory "/opt/rh/httpd24/root/usr/share/httpd/icons">
        Options Indexes MultiViews FollowSymlinks
        AllowOverride None
        Require all granted
    </Directory>

    #
    # AddIcon* directives tell the server which icon to show for different
    # files or filename extensions.  These are only displayed for
    # FancyIndexed directories.
    #
    AddIconByEncoding (CMP,/icons/compressed.gif) x-compress x-gzip

    AddIconByType (TXT,/icons/text.gif) text/*
    AddIconByType (IMG,/icons/image2.gif) image/*
    AddIconByType (SND,/icons/sound2.gif) audio/*
    AddIconByType (VID,/icons/movie.gif) video/*

    AddIcon /icons/binary.gif .bin .exe
    AddIcon /icons/binhex.gif .hqx
    AddIcon /icons/tar.gif .tar
    AddIcon /icons/world2.gif .wrl .wrl.gz .vrml .vrm .iv
    AddIcon /icons/compressed.gif .Z .z .tgz .gz .zip
    AddIcon /icons/a.gif .ps .ai .eps
    AddIcon /icons/layout.gif .html .shtml .htm .pdf
    AddIcon /icons/text.gif .txt
    AddIcon /icons/c.gif .c
    AddIcon /icons/p.gif .pl .py
    AddIcon /icons/f.gif .for
    AddIcon /icons/dvi.gif .dvi
    AddIcon /icons/uuencoded.gif .uu
    AddIcon /icons/script.gif .conf .sh .shar .csh .ksh .tcl
    AddIcon /icons/tex.gif .tex
    AddIcon /icons/bomb.gif /core
    AddIcon /icons/bomb.gif */core.*

    AddIcon /icons/back.gif ..
    AddIcon /icons/hand.right.gif README
    AddIcon /icons/folder.gif ^^DIRECTORY^^
    AddIcon /icons/blank.gif ^^BLANKICON^^

    #
    # DefaultIcon is which icon to show for files which do not have an icon
    # explicitly set.
    #
    DefaultIcon /icons/unknown.gif

    #
    # AddDescription allows you to place a short description after a file in
    # server-generated indexes.  These are only displayed for FancyIndexed
    # directories.
    # Format: AddDescription "description" filename
    #
    #AddDescription "GZIP compressed document" .gz
    #AddDescription "tar archive" .tar
    #AddDescription "GZIP compressed tar archive" .tgz

    #
    # ReadmeName is the name of the README file the server will look for by
    # default, and append to directory listings.
    #
    # HeaderName is the name of a file which should be prepended to
    # directory indexes.
    ReadmeName README.html
    HeaderName HEADER.html

    #
    # IndexIgnore is a set of filenames which directory indexing should ignore
    # and not include in the listing.  Shell-style wildcarding is permitted.
    #
    IndexIgnore .??* *~ *# HEADER* README* RCS CVS *,v *,t

  rh-php70-php.conf: >
    #

    # The following lines prevent .user.ini files from being viewed by Web
    clients.

    #

    <Files ".user.ini">
        <IfModule mod_authz_core.c>
            Require all denied
        </IfModule>
        <IfModule !mod_authz_core.c>
            Order allow,deny
            Deny from all
            Satisfy All
        </IfModule>
    </Files>


    #

    # Allow php to handle Multiviews

    #

    AddType text/html .php


    #

    # Add index.php to the list of files that will be served as directory

    # indexes.

    #

    DirectoryIndex index.php


    # mod_php options

    <IfModule  mod_php7.c>
        #
        # Cause the PHP interpreter to handle files with a .php extension.
        #
        <FilesMatch \.php$>
            SetHandler application/x-httpd-php
        </FilesMatch>

        #
        # Uncomment the following lines to allow PHP to pretty-print .phps
        # files as PHP source code:
        #
        #<FilesMatch \.phps$>
        #    SetHandler application/x-httpd-php-source
        #</FilesMatch>

        #
        # Apache specific PHP configuration options
        # those can be override in each configured vhost
        #
        php_value soap.wsdl_cache_dir  "/var/opt/rh/rh-php70/lib/php/wsdlcache"

        #php_value opcache.file_cache   "/var/opt/rh/rh-php70/lib/php/opcache"
    </IfModule>
  seguridad.conf: >

    ServerSignature Off

    ServerTokens Prod


    Header edit Set-Cookie ^(.*)$ $1;HttpOnly;Secure

    RewriteEngine On

    RewriteCond %{REQUEST_METHOD} ^TRACE

    RewriteRule .* -[F]

    RewriteCond %{REQUEST_METHOD} ^TRACK

    RewriteRule .* -[F]


    TraceEnable off

    Header always append X-Frame-Options SAMEORIGIN

    # Header set Cache-Control "max-age=7200, must-revalidate, private,
    no-store, no-cache"

    Header set Cache-Control "no-cache, no-store, must-revalidate, private"

    Header set Pragma "no-cache"

    Header set Expires 0

    # Header set Access-Control-Allow-Origin "https://miba.qa.gcba.gob.ar"

    errorDocument 400 /errors/not_found.html

    errorDocument 401 /errors/not_found.html

    errorDocument 403 http://www.buenosaires.gob.ar/noexiste.html

    errorDocument 404 http://www.buenosaires.gob.ar/noexiste.html

    errorDocument 405 /errors/not_found.html

    errorDocument 406 /errors/not_found.html
  ssl.conf: >+
    #

    # When we also provide SSL we have to listen to the

    # the HTTPS port in addition.

    #

    Listen 0.0.0.0:8443 https


    ##

    ##  SSL Global Context

    ##

    ##  All SSL configuration in this context applies both to

    ##  the main server and all SSL-enabled virtual hosts.

    ##


    #   Pass Phrase Dialog:

    #   Configure the pass phrase gathering process.

    #   The filtering dialog program (`builtin' is a internal

    #   terminal dialog) has to provide the pass phrase on stdout.

    SSLPassPhraseDialog builtin


    #   Inter-Process Session Cache:

    #   Configure the SSL Session Cache: First the mechanism

    #   to use and second the expiring timeout (in seconds).

    SSLSessionCache
    shmcb:/opt/rh/httpd24/root/var/run/httpd/sslcache(512000)

    SSLSessionCacheTimeout  300


    #   Pseudo Random Number Generator (PRNG):

    #   Configure one or more sources to seed the PRNG of the

    #   SSL library. The seed data should be of good random quality.

    #   WARNING! On some platforms /dev/random blocks if not enough entropy

    #   is available. This means you then cannot use the /dev/random device

    #   because it would lead to very long connection times (as long as

    #   it requires to make more entropy available). But usually those

    #   platforms additionally provide a /dev/urandom device which doesn't

    #   block. So, if available, use this one instead. Read the mod_ssl User

    #   Manual for more details.

    SSLRandomSeed startup file:/dev/urandom  256

    SSLRandomSeed connect builtin

    #SSLRandomSeed startup file:/dev/random  512

    #SSLRandomSeed connect file:/dev/random  512

    #SSLRandomSeed connect file:/dev/urandom 512


    #

    # Use "SSLCryptoDevice" to enable any supported hardware

    # accelerators. Use "openssl engine -v" to list supported

    # engine names.  NOTE: If you enable an accelerator and the

    # server does not start, consult the error logs and ensure

    # your accelerator is functioning properly.

    #

    SSLCryptoDevice builtin

    #SSLCryptoDevice ubsec


    ##

    ## SSL Virtual Host Context

    ##


    <VirtualHost _default_:8443>


    # General setup for the virtual host, inherited from global configuration

    #DocumentRoot "/var/www/html"

    #ServerName www.example.com:443


    # Use separate log files for the SSL virtual host; note that LogLevel

    # is not inherited from httpd.conf.

    ErrorLog |/usr/bin/cat

    TransferLog |/usr/bin/cat

    LogLevel warn


    #   SSL Engine Switch:

    #   Enable/Disable SSL for this virtual host.

    SSLEngine on


    #   SSL Protocol support:

    # List the enable protocol levels with which clients will be able to

    # connect.  Disable SSLv2 access by default:

    SSLProtocol all -SSLv2


    #   SSL Cipher Suite:

    #   List the ciphers that the client is permitted to negotiate.

    #   See the mod_ssl documentation for a complete list.

    SSLCipherSuite HIGH:MEDIUM:!aNULL:!MD5


    #   Speed-optimized SSL Cipher configuration:

    #   If speed is your main concern (on busy HTTPS servers e.g.),

    #   you might want to force clients to specific, performance

    #   optimized ciphers. In this case, prepend those ciphers

    #   to the SSLCipherSuite list, and enable SSLHonorCipherOrder.

    #   Caveat: by giving precedence to RC4-SHA and AES128-SHA

    #   (as in the example below), most connections will no longer

    #   have perfect forward secrecy - if the server's key is

    #   compromised, captures of past or future traffic must be

    #   considered compromised, too.

    #SSLCipherSuite RC4-SHA:AES128-SHA:HIGH:MEDIUM:!aNULL:!MD5

    #SSLHonorCipherOrder on


    #   Server Certificate:

    # Point SSLCertificateFile at a PEM encoded certificate.  If

    # the certificate is encrypted, then you will be prompted for a

    # pass phrase.  Note that a kill -HUP will prompt again.  A new

    # certificate can be generated using the genkey(1) command.

    SSLCertificateFile /etc/pki/tls/certs/localhost.crt


    #   Server Private Key:

    #   If the key is not combined with the certificate, use this

    #   directive to point at the key file.  Keep in mind that if

    #   you've both a RSA and a DSA private key you can configure

    #   both in parallel (to also allow the use of DSA ciphers, etc.)

    SSLCertificateKeyFile /etc/pki/tls/private/localhost.key


    #   Server Certificate Chain:

    #   Point SSLCertificateChainFile at a file containing the

    #   concatenation of PEM encoded CA certificates which form the

    #   certificate chain for the server certificate. Alternatively

    #   the referenced file can be the same as SSLCertificateFile

    #   when the CA certificates are directly appended to the server

    #   certificate for convinience.

    #SSLCertificateChainFile /etc/pki/tls/certs/server-chain.crt


    #   Certificate Authority (CA):

    #   Set the CA certificate verification path where to find CA

    #   certificates for client authentication or alternatively one

    #   huge file containing all of them (file must be PEM encoded)

    #SSLCACertificateFile /etc/pki/tls/certs/ca-bundle.crt


    #   Client Authentication (Type):

    #   Client certificate verification type and depth.  Types are

    #   none, optional, require and optional_no_ca.  Depth is a

    #   number which specifies how deeply to verify the certificate

    #   issuer chain before deciding the certificate is not valid.

    #SSLVerifyClient require

    #SSLVerifyDepth  10


    #   Access Control:

    #   With SSLRequire you can do per-directory access control based

    #   on arbitrary complex boolean expressions containing server

    #   variable checks and other lookup directives.  The syntax is a

    #   mixture between C and Perl.  See the mod_ssl documentation

    #   for more details.

    #<Location />

    #SSLRequire (    %{SSL_CIPHER} !~ m/^(EXP|NULL)/ \

    #            and %{SSL_CLIENT_S_DN_O} eq "Snake Oil, Ltd." \

    #            and %{SSL_CLIENT_S_DN_OU} in {"Staff", "CA", "Dev"} \

    #            and %{TIME_WDAY} >= 1 and %{TIME_WDAY} <= 5 \

    #            and %{TIME_HOUR} >= 8 and %{TIME_HOUR} <= 20       ) \

    #           or %{REMOTE_ADDR} =~ m/^192\.76\.162\.[0-9]+$/

    #</Location>


    #   SSL Engine Options:

    #   Set various options for the SSL engine.

    #   o FakeBasicAuth:

    #     Translate the client X.509 into a Basic Authorisation.  This means
    that

    #     the standard Auth/DBMAuth methods can be used for access control.  The

    #     user name is the `one line' version of the client's X.509 certificate.

    #     Note that no password is obtained from the user. Every entry in the
    user

    #     file needs this password: `xxj31ZMTZzkVA'.

    #   o ExportCertData:

    #     This exports two additional environment variables: SSL_CLIENT_CERT and

    #     SSL_SERVER_CERT. These contain the PEM-encoded certificates of the

    #     server (always existing) and the client (only existing when client

    #     authentication is used). This can be used to import the certificates

    #     into CGI scripts.

    #   o StdEnvVars:

    #     This exports the standard SSL/TLS related `SSL_*' environment
    variables.

    #     Per default this exportation is switched off for performance reasons,

    #     because the extraction step is an expensive operation and is usually

    #     useless for serving static content. So one usually enables the

    #     exportation for CGI and SSI requests only.

    #   o StrictRequire:

    #     This denies access when "SSLRequireSSL" or "SSLRequire" applied even

    #     under a "Satisfy any" situation, i.e. when it applies access is denied

    #     and no other module can change it.

    #   o OptRenegotiate:

    #     This enables optimized SSL connection renegotiation handling when SSL

    #     directives are used in per-directory context.

    #SSLOptions +FakeBasicAuth +ExportCertData +StrictRequire

    <Files ~ "\.(cgi|shtml|phtml|php3?)$">
        SSLOptions +StdEnvVars
    </Files>

    <Directory "/var/www/cgi-bin">
        SSLOptions +StdEnvVars
    </Directory>


    #   SSL Protocol Adjustments:

    #   The safe and default but still SSL/TLS standard compliant shutdown

    #   approach is that mod_ssl sends the close notify alert but doesn't wait
    for

    #   the close notify alert from client. When you need a different shutdown

    #   approach you can use one of the following variables:

    #   o ssl-unclean-shutdown:

    #     This forces an unclean shutdown when the connection is closed, i.e. no

    #     SSL close notify alert is send or allowed to received.  This violates

    #     the SSL/TLS standard but is needed for some brain-dead browsers. Use

    #     this when you receive I/O errors because of the standard approach
    where

    #     mod_ssl sends the close notify alert.

    #   o ssl-accurate-shutdown:

    #     This forces an accurate shutdown when the connection is closed, i.e. a

    #     SSL close notify alert is send and mod_ssl waits for the close notify

    #     alert of the client. This is 100% SSL/TLS standard compliant, but in

    #     practice often causes hanging connections with brain-dead browsers.
    Use

    #     this only for browsers where you know that their SSL implementation

    #     works correctly.

    #   Notice: Most problems of broken clients are also related to the HTTP

    #   keep-alive facility, so you usually additionally want to disable

    #   keep-alive for those clients, too. Use variable "nokeepalive" for this.

    #   Similarly, one has to force some clients to use HTTP/1.0 to workaround

    #   their broken HTTP/1.1 implementation. Use variables "downgrade-1.0" and

    #   "force-response-1.0" for this.

    BrowserMatch "MSIE [2-5]" \
             nokeepalive ssl-unclean-shutdown \
             downgrade-1.0 force-response-1.0

    #   Per-Server Logging:

    #   The home of a custom SSL log file. Use this when you want a

    #   compact non-error SSL logfile on a virtual host basis.

    CustomLog |/usr/bin/cat \
              "%t %h %{SSL_PROTOCOL}x %{SSL_CIPHER}x \"%r\" %b"

    </VirtualHost>

  turnos.conf: "Listen 8081\n<VirtualHost *:8081>\n\tDocumentRoot \"/opt/app-root/src/web\"\n\tServerName 10.16.1.111\n\tDirectoryIndex app.php\n\t<Directory \"/opt/app-root/src/web\">\n        AllowOverride All\n\tAllow from All\n        #Require all granted\n\t</Directory>\n\tErrorLog /opt/app-root/turnos-error.log\n\tCustomLog /opt/app-root/turnos-access.log combined\n</VirtualHost>\n\nHeader set X-Frame-Options \"ALLOW-FROM http://www.buenosaires.gob.ar/turnos\"\nHeader set Cache-Control \"no-cache, no-store, must-revalidate, private\"\nHeader set Pragma \"no-cache\"\n"
  userdir.conf: |+
    #
    # UserDir: The name of the directory that is appended onto a user's home
    # directory if a ~user request is received.
    #
    # The path to the end user account 'public_html' directory must be
    # accessible to the webserver userid.  This usually means that ~userid
    # must have permissions of 711, ~userid/public_html must have permissions
    # of 755, and documents contained therein must be world-readable.
    # Otherwise, the client will only receive a "403 Forbidden" message.
    #
    <IfModule mod_userdir.c>
        #
        # UserDir is disabled by default since it can confirm the presence
        # of a username on the system (depending on home directory
        # permissions).
        #
        UserDir disabled

        #
        # To enable requests to /~user/ to serve the user's public_html
        # directory, remove the "UserDir disabled" line above, and uncomment
        # the following line instead:
        #
        #UserDir public_html
    </IfModule>

    #
    # Control access to UserDir directories.  The following is an example
    # for a site where these directories are restricted to read-only.
    #
    <Directory "/home/*/public_html">
        AllowOverride FileInfo AuthConfig Limit Indexes
        Options MultiViews Indexes SymLinksIfOwnerMatch IncludesNoExec
        Require method GET POST OPTIONS
    </Directory>

  welcome.conf: |
    #
    # This configuration file enables the default "Welcome" page if there
    # is no default index page present for the root URL.  To disable the
    # Welcome page, comment out all the lines below.
    #
    # NOTE: if this file is removed, it will be restored on upgrades.
    #
    <LocationMatch "^/+$">
        Options -Indexes
        ErrorDocument 403 /.noindex.html
    </LocationMatch>

    <Directory /opt/rh/httpd24/root/usr/share/httpd/noindex>
        AllowOverride None
        Require all granted
    </Directory>

    Alias /.noindex.html /opt/rh/httpd24/root/usr/share/httpd/noindex/index.html
kind: ConfigMap
metadata:
  creationTimestamp: '2018-10-26T00:22:39Z'
  name: common-configmap
  namespace: dev2
  resourceVersion: '638478'
  selfLink: /api/v1/namespaces/sigeci-qa/configmaps/gestra-config
  uid: 3f5169c5-d8b5-11e8-8aaf-08002748d411
